# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import gptchat_v2_pb2 as gptchat__v2__pb2


class ChatServiceStub(object):
    """/////////////////// CHAT /////////////////////////////

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Chat = channel.unary_unary(
            '/giga.controller.v2.ChatService/Chat',
            request_serializer=gptchat__v2__pb2.ChatRequest.SerializeToString,
            response_deserializer=gptchat__v2__pb2.ChatResponse.FromString,
        )


class ChatServiceServicer(object):
    """/////////////////// CHAT /////////////////////////////

    """

    def Chat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Chat': grpc.unary_unary_rpc_method_handler(
            servicer.Chat,
            request_deserializer=gptchat__v2__pb2.ChatRequest.FromString,
            response_serializer=gptchat__v2__pb2.ChatResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'giga.controller.v2.ChatService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class ChatService(object):
    """/////////////////// CHAT /////////////////////////////

    """

    @staticmethod
    def Chat(request,
             target,
             options=(),
             channel_credentials=None,
             call_credentials=None,
             insecure=False,
             compression=None,
             wait_for_ready=None,
             timeout=None,
             metadata=None):
        return grpc.experimental.unary_unary(request, target, '/giga.controller.v2.ChatService/Chat',
                                             gptchat__v2__pb2.ChatRequest.SerializeToString,
                                             gptchat__v2__pb2.ChatResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class EmbeddingsServiceStub(object):
    """/////////////////// EMBEDDINGS /////////////////////////////

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Embeddings = channel.unary_unary(
            '/giga.controller.v2.EmbeddingsService/Embeddings',
            request_serializer=gptchat__v2__pb2.EmbeddingsRequest.SerializeToString,
            response_deserializer=gptchat__v2__pb2.EmbeddingsResponse.FromString,
        )


class EmbeddingsServiceServicer(object):
    """/////////////////// EMBEDDINGS /////////////////////////////

    """

    def Embeddings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EmbeddingsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Embeddings': grpc.unary_unary_rpc_method_handler(
            servicer.Embeddings,
            request_deserializer=gptchat__v2__pb2.EmbeddingsRequest.FromString,
            response_serializer=gptchat__v2__pb2.EmbeddingsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'giga.controller.v2.EmbeddingsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class EmbeddingsService(object):
    """/////////////////// EMBEDDINGS /////////////////////////////

    """

    @staticmethod
    def Embeddings(request,
                   target,
                   options=(),
                   channel_credentials=None,
                   call_credentials=None,
                   insecure=False,
                   compression=None,
                   wait_for_ready=None,
                   timeout=None,
                   metadata=None):
        return grpc.experimental.unary_unary(request, target, '/giga.controller.v2.EmbeddingsService/Embeddings',
                                             gptchat__v2__pb2.EmbeddingsRequest.SerializeToString,
                                             gptchat__v2__pb2.EmbeddingsResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ModelsServiceStub(object):
    """/////////////////// MODELS /////////////////////////////

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListModels = channel.unary_unary(
            '/giga.controller.v2.ModelsService/ListModels',
            request_serializer=gptchat__v2__pb2.ListModelsRequest.SerializeToString,
            response_deserializer=gptchat__v2__pb2.ListModelsResponse.FromString,
        )
        self.RetrieveModel = channel.unary_unary(
            '/giga.controller.v2.ModelsService/RetrieveModel',
            request_serializer=gptchat__v2__pb2.RetrieveModelRequest.SerializeToString,
            response_deserializer=gptchat__v2__pb2.RetrieveModelResponse.FromString,
        )


class ModelsServiceServicer(object):
    """/////////////////// MODELS /////////////////////////////

    """

    def ListModels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'ListModels': grpc.unary_unary_rpc_method_handler(
            servicer.ListModels,
            request_deserializer=gptchat__v2__pb2.ListModelsRequest.FromString,
            response_serializer=gptchat__v2__pb2.ListModelsResponse.SerializeToString,
        ),
        'RetrieveModel': grpc.unary_unary_rpc_method_handler(
            servicer.RetrieveModel,
            request_deserializer=gptchat__v2__pb2.RetrieveModelRequest.FromString,
            response_serializer=gptchat__v2__pb2.RetrieveModelResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'giga.controller.v2.ModelsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class ModelsService(object):
    """/////////////////// MODELS /////////////////////////////

    """

    @staticmethod
    def ListModels(request,
                   target,
                   options=(),
                   channel_credentials=None,
                   call_credentials=None,
                   insecure=False,
                   compression=None,
                   wait_for_ready=None,
                   timeout=None,
                   metadata=None):
        return grpc.experimental.unary_unary(request, target, '/giga.controller.v2.ModelsService/ListModels',
                                             gptchat__v2__pb2.ListModelsRequest.SerializeToString,
                                             gptchat__v2__pb2.ListModelsResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RetrieveModel(request,
                      target,
                      options=(),
                      channel_credentials=None,
                      call_credentials=None,
                      insecure=False,
                      compression=None,
                      wait_for_ready=None,
                      timeout=None,
                      metadata=None):
        return grpc.experimental.unary_unary(request, target, '/giga.controller.v2.ModelsService/RetrieveModel',
                                             gptchat__v2__pb2.RetrieveModelRequest.SerializeToString,
                                             gptchat__v2__pb2.RetrieveModelResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
